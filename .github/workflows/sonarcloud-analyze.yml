name: F-Lab SonarCloud Code Analyze

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

env:
  CACHED_DEPENDENCIES_PATHS: "**/node_modules"

jobs:
  CodeAnalyze:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Set SonarCloud Project Key
        run: |
          REPO_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 2)
          ORG_NAME=$(echo $GITHUB_REPOSITORY | cut -d '/' -f 1)
          SONAR_PROJECT_KEY="${ORG_NAME}_${REPO_NAME}"
          echo "SONAR_PROJECT_KEY=$SONAR_PROJECT_KEY" >> $GITHUB_ENV

      - name: Analyze with SonarCloud
        uses: SonarSource/sonarcloud-github-action@master
        id: analyze-sonarcloud
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.SECRET_GITHUB_BOT }}
          SONAR_TOKEN: ${{ secrets.SECRET_SONARQUBE }}
        with:
          args: -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=f-lab-edu-1



            ## 선언형 프로그래밍이란?

선언형 프로그래밍이란 어떻게가 ****아니라 **무엇이 일어나기를 원하는지 설명하는것에 중점을 두는 프로그래밍 패러다임**이다. 즉, 개발자가 컴퓨터에게 원하는 결과를 지시하면, 컴퓨터가 그것을 달성하기 위한 최적의 방법을 스스로 찾아낸다.

가장 널리 알려진 선언형 프로그래밍의 예시로는 SQL이 있다. SQL을 사용할 때, 개발자가 원하는 데이터를 데이터베이스에 요청하면 데이터베이스는 가장 효율적인 방법으로 그 데이터를 조회해 준다. 개발자는 데이터베이스가 데이터를 어떻게 찾는지 신경 쓸 필요 없이 원하는 것을 요청하기만 하면 된다.

또 다른 선언형 프로그래밍의 예시로는 HTML이 있다. HTML을 사용할 때, 개발자는 웹페이지의 구조를 정의하고, 브라우저는 그 구조를 어떻게 렌더링할지 결정한다 개발자는 브라우저가 어떻게 페이지를 렌더링하는지 신경 쓰지 않고 원하는 것을 정의하기만 하면 된다.

## 절차적 프로그래밍이란?

반면 절차적 프로그래밍은 원하는 작업이 어떻게 실행되는지에 중점을 둔 프로그래밍 패러다임이다. 즉, 개발자는 컴퓨터에 특정 결과를 얻기 위한 단계를 지시한다.

가장 널리 알려진 절차적 프로그래밍의 예로는 C가 있다. C를 사용할 때, 개발자는 컴퓨터에 특정 결과를 얻기 위한 단계를 지시하는 코드를 작성한다. 개발자는 컴퓨터가 코드를 실행하는 세부 사항까지 신경을 써야하며, 컴퓨터에 정확하게 해야 할 일을 지시해야 한다.

절차적 프로그래밍의 또 다른 예로는 자바스크립트가 있다. 자바스크립트를 사용할 할 때 개발자는 브라우저가 특정한 결과를 얻기 위한 단계를 수행하도록 지시하는 코드를 작성한다. 개발자는 브라우저가 코드를 어떻게 실행할지에 대해 세세히 신경쓰고, 정확하게 지시해야 한다.

## 선언형 프로그래밍과 절차적 프로그래밍의 핵심 차이점

선언형 프로그래밍과 절차적 프로그래밍의 정의를 알아봤으니, 이제 두 프로그래밍 패러다임의 주요 차이점에 대해 알아보자

### What vs How 어디에 중점을 둘 것인가

선언형 프로그래밍과 절차적 프로그래밍의 가장 큰차이는 **무엇**에 중점을 두느냐와 **어떻게**에 중점을 두느냐에 있다

절차적 프로그래밍은 과정을 거쳐 어떻게 일을 처리할지에 중점을 두는 반면, 선언형 프로그래밍은 어떤 일을 하고싶은지에 중점을 둔다.

### 추상화

선언형 프로그래밍은 절차적 프로그래밍보다 더 추상적인 경향이 있다. 선언형 프로그래밍에서는 내부 동작을 신경 쓰지 않고, 무엇을 할지 고수준에서 묘사한다. 반면 절차적 프로그래밍에서는 특정 결과를 얻기 위해 컴퓨터가 수행해야 할 정확한 단계들을 묘사한다.

### 가독성

선언형 프로그래밍은 절차적 프로그래밍에 비해 가독성이 높다